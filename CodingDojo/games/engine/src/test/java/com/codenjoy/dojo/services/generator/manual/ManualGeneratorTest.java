package com.codenjoy.dojo.services.generator.manual;

/*-
 * #%L
 * Codenjoy - it's a dojo-like platform from developers to developers.
 * %%
 * Copyright (C) 2012 - 2022 Codenjoy
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.codenjoy.dojo.utils.RedirectOutput;
import com.codenjoy.dojo.utils.SmokeUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import static com.codenjoy.dojo.services.generator.ElementGenerator.PROJECT_BASE_FOLDER;
import static com.codenjoy.dojo.services.generator.ElementGeneratorRunner.pleaseRunInAllProject;
import static org.junit.Assert.assertEquals;

public class ManualGeneratorTest {

    private final String PROPERTIES_FILE = "/games/mollymage/src/main/webapp/resources/mollymage/help/ru/info.properties";
    private final String PROPERTIES_DATA = "key.one=data1\nkey.two=data2\n";

    private final String BASE = "target/generated-test-sources/manual-generator" + new Random().nextInt();
    private final String GLOBAL_SOURCES_PATH = "global/";
    private final String GAME_SOURCES_PATH = "games/${game}/";

    private final String GLOBAL_DEFAULT_PART1 = BASE + "/global/part1.md";
    private final String DATA1 = "Part1 file from Global Path\nTest change game name: ${game}";

    private final String GAME_LANGUAGE_PART2 = BASE + "/games/mollymage/ru/part2.md";
    private final String DATA2 = "Part2 file from Game Path, Language directory";

    private final String GAME_LANGUAGE_EN_PART2 = BASE + "/games/mollymage/en/part2.md";
    private final String DATA5 = "Part5 file from Game Path, Default English Language directory";

    private final String GAME_DEFAULT_PART3 = BASE + "/games/mollymage/part3.md";
    private final String DATA3 = "Part3 file from Game Path";

    private final String GLOBAL_LANGUAGE_PART4 = BASE + "/global/ru/part4.md";
    private final String DATA4 = "Part4 file from Global Path, Language directory";

    private RedirectOutput output = new RedirectOutput();
    private ManualGenerator generator;

    @Before
    public void setup() {
        createPropertiesFile();
        generator = getGenerator();
        output.redirect();
    }

    private void createPropertiesFile() {
        createFile(BASE + PROPERTIES_FILE, PROPERTIES_DATA);
    }

    @After
    public void after() {
        output.rollback();
    }

    private ManualGenerator getGenerator() {
        return new ManualGenerator("mollymage", "ru", BASE, GLOBAL_SOURCES_PATH, GAME_SOURCES_PATH) {
            @Override
            protected List<String> getManualParts() {
                return Arrays.asList(
                        "part1.md",
                        "part2.md",
                        "part3.md",
                        "part4.md");
            }
        };
    }

    @Test
    public void whenAllSourceFilesPresented_shouldGenerateTargetFileCorrect() {
        // given
        generateCorrectManualParts();
        File file = generatedManual();

        // when
        generator.generate("codenjoy");

        // then
        assertEquals("Target file should be created",
                true, file.exists());

        assertEquals("Success message printed at console",
                true, output.contains("Store 'codenjoy:mollymage:ru' in file:"));

        assertEquals("<!-- Code generated by ManualGeneratorRunner.java\n" +
                        "  !!!DO NOT EDIT!!! -->\n" +
                        "Part1 file from Global Path\n" +
                        "Test change game name: mollymage\n" +
                        "\n" +
                        "Part2 file from Game Path, Language directory\n" +
                        "\n" +
                        "Part3 file from Game Path\n" +
                        "\n" +
                        "Part4 file from Global Path, Language directory\n" +
                        "\n",
                SmokeUtils.load(file));
    }

    @Test
    public void whenNotFoundGameFileWithThisLanguageButPresentDefaultEnglish_shouldGenerateTargetFileCorrect() {
        // given
        generateManualPartsWithoutOneFile_butPresentThisPartWithOtherLanguage();
        File file = generatedManual();

        // when
        generator.generate("codenjoy");

        // then
        assertEquals("Target file should be created: " + file,
                true, file.exists());

        assertEquals("Success message printed at console",
                true, output.contains("Store 'codenjoy:mollymage:ru' in file:"));

        assertEquals("<!-- Code generated by ManualGeneratorRunner.java\n" +
                        "  !!!DO NOT EDIT!!! -->\n" +
                        "Part1 file from Global Path\n" +
                        "Test change game name: mollymage\n" +
                        "\n" +
                        "Part5 file from Game Path, Default English Language directory\n" +
                        "\n" +
                        "Part3 file from Game Path\n" +
                        "\n" +
                        "Part4 file from Global Path, Language directory\n" +
                        "\n",
                SmokeUtils.load(file));
    }

    @Test
    public void whenOneSourceFileMissed_shouldPrintErrorMessageToConsole() {
        // given
        generateManualPartsWithoutOneFile();

        // when
        generator.generate("codenjoy");

        // then
        assertEquals("target file should not be created: " + generatedManual(),
                false, generatedManual().exists());

        assertEquals("error message printed at console",
                true, output.contains("[ERROR] Can't find resources for " +
                        "manualType{codenjoy}, game{mollymage}, language{ru}"));

        assertEquals("information about missing file should be printed in console",
                true, output.contains(
                        "File is missing: part4.md"));
    }

    private void generateCorrectManualParts() {
        createFile(GLOBAL_DEFAULT_PART1, DATA1);
        createFile(GAME_LANGUAGE_PART2, DATA2);
        createFile(GAME_DEFAULT_PART3, DATA3);
        createFile(GLOBAL_LANGUAGE_PART4, DATA4);
    }

    private void generateManualPartsWithoutOneFile() {
        createFile(GLOBAL_DEFAULT_PART1, DATA1);
        createFile(GAME_LANGUAGE_PART2, DATA2);
        createFile(GAME_DEFAULT_PART3, DATA3);
        // we didn't create last file and should see message
        // about its missing in error logs
        // createFile(GLOBAL_LANGUAGE_PART4, DATA4);
    }

    private void generateManualPartsWithoutOneFile_butPresentThisPartWithOtherLanguage() {
        createFile(GLOBAL_DEFAULT_PART1, DATA1);
        // we didn't create last file and should see message
        // about its missing in error logs
        // createFile(GAME_LANGUAGE_PART2, DATA2);
        // but present default language
        createFile(GAME_LANGUAGE_EN_PART2, DATA5);
        createFile(GAME_DEFAULT_PART3, DATA3);
        createFile(GLOBAL_LANGUAGE_PART4, DATA4);
    }

    private void createFile(String path, String data) {
        SmokeUtils.saveToFile(new File(path), data);
    }

    private File generatedManual() {
        return new File(BASE + "/games/mollymage/codenjoy-manual-ru.md");
    }

    public static String pathInsideCodingDojo() {
        String path = new File(".").getAbsolutePath();
        return path.contains(PROJECT_BASE_FOLDER) ? path : null;
    }

    public static void skipTestWarning() {
        // TODO если java-client запущен без других проектов, то тесты clifford/mollymage не проходят
        pleaseRunInAllProject();
        System.out.println("WARNING: Skip test.");
    }
}